apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.vgleadsheets.android"

        minSdkVersion 21
        targetSdkVersion 28

        versionCode getVersionCode()
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            String decodedPass = System.getenv("KEYPASS")

            storeFile file("vgls.jks")
            storePassword decodedPass
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword decodedPass
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/mvrx_release.kotlin_module'
    }
}

dependencies {
    // Module deps
    implementation project(path: ':repository')
    implementation project(path: ':features:main')
    implementation project(path: ':features:main:games')

    implementation project(path: ':di')

    // Kotlin libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Junit libs
    testImplementation 'junit:junit:4.12'

    // Espresso libs
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Dagger annotation processors
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // AssistedInject Annotation Processors
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedinject_version"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assistedinject_version"
}

def getVersionCode = { ->
    def proc = Runtime.getRuntime().exec("git rev-list --all --count")

    def result = proc.waitFor()
    if (result != 0) {
        return 1 // no git revisions
    }

    // Multiply by 10 so LSB can represent build type, if we ever need NDK libs.
    return (proc.getInputStream().readLines().get(0).toInteger() * 10)
}

def getVersionName = { ->
    def proc = Runtime.getRuntime().exec("git describe --tags")

    def result = proc.waitFor()
    if (result != 0) {
        return "git-error"
    }

    return proc.getInputStream().readLines().get(0)
}
